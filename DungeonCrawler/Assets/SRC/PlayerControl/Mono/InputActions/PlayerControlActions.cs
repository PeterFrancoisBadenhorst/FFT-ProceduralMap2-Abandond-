//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/SRC/PlayerControl/Mono/InputActions/PlayerControlActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.SRC.ProceduralMapGeneration.Assets.SRC.PlayerControl.Mono
{
    public partial class @PlayerControlActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControlActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlActions"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""8c722250-e71c-4289-a986-19728f7dcad0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""adbf6760-c303-4249-b2ef-d460371864d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Modifier"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5869501-8994-4365-9a89-33cc507fef63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ea9cc403-76ff-43c9-bad3-dd5dd4e3eff4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseControl_X"",
                    ""type"": ""PassThrough"",
                    ""id"": ""479db5b9-f641-481b-9134-b87e01bb6a5b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseControl_Y"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bc4d82c8-1871-4833-82cb-28ac4b957593"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""87a17dd3-38a6-4954-ba8c-cc63ce1dc9f2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""51992668-6f15-4604-961f-9b6af20b4e20"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f53b6ca0-b001-4675-8a44-8b78f36358a0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1de64f4a-ca5d-404c-abdc-53151f3525b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""04e8439b-7872-4776-a4bf-bdea8cb79c6d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e12604f5-19c8-4ee8-9ab9-e5db1dd3438f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Modifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9dbd035-5913-464e-9730-ccbae8af6dde"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a08514b2-706b-4832-8bc6-9af7a0a5fa20"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseControl_X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b63090a-46e9-4e6a-ba1d-cec1da5bdced"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseControl_Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerInput
            m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
            m_PlayerInput_Movement = m_PlayerInput.FindAction("Movement", throwIfNotFound: true);
            m_PlayerInput_Modifier = m_PlayerInput.FindAction("Modifier", throwIfNotFound: true);
            m_PlayerInput_Jump = m_PlayerInput.FindAction("Jump", throwIfNotFound: true);
            m_PlayerInput_MouseControl_X = m_PlayerInput.FindAction("MouseControl_X", throwIfNotFound: true);
            m_PlayerInput_MouseControl_Y = m_PlayerInput.FindAction("MouseControl_Y", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerInput
        private readonly InputActionMap m_PlayerInput;
        private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
        private readonly InputAction m_PlayerInput_Movement;
        private readonly InputAction m_PlayerInput_Modifier;
        private readonly InputAction m_PlayerInput_Jump;
        private readonly InputAction m_PlayerInput_MouseControl_X;
        private readonly InputAction m_PlayerInput_MouseControl_Y;
        public struct PlayerInputActions
        {
            private @PlayerControlActions m_Wrapper;
            public PlayerInputActions(@PlayerControlActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerInput_Movement;
            public InputAction @Modifier => m_Wrapper.m_PlayerInput_Modifier;
            public InputAction @Jump => m_Wrapper.m_PlayerInput_Jump;
            public InputAction @MouseControl_X => m_Wrapper.m_PlayerInput_MouseControl_X;
            public InputAction @MouseControl_Y => m_Wrapper.m_PlayerInput_MouseControl_Y;
            public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerInputActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Modifier.started += instance.OnModifier;
                @Modifier.performed += instance.OnModifier;
                @Modifier.canceled += instance.OnModifier;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseControl_X.started += instance.OnMouseControl_X;
                @MouseControl_X.performed += instance.OnMouseControl_X;
                @MouseControl_X.canceled += instance.OnMouseControl_X;
                @MouseControl_Y.started += instance.OnMouseControl_Y;
                @MouseControl_Y.performed += instance.OnMouseControl_Y;
                @MouseControl_Y.canceled += instance.OnMouseControl_Y;
            }

            private void UnregisterCallbacks(IPlayerInputActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Modifier.started -= instance.OnModifier;
                @Modifier.performed -= instance.OnModifier;
                @Modifier.canceled -= instance.OnModifier;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @MouseControl_X.started -= instance.OnMouseControl_X;
                @MouseControl_X.performed -= instance.OnMouseControl_X;
                @MouseControl_X.canceled -= instance.OnMouseControl_X;
                @MouseControl_Y.started -= instance.OnMouseControl_Y;
                @MouseControl_Y.performed -= instance.OnMouseControl_Y;
                @MouseControl_Y.canceled -= instance.OnMouseControl_Y;
            }

            public void RemoveCallbacks(IPlayerInputActions instance)
            {
                if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerInputActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
        public interface IPlayerInputActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnModifier(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnMouseControl_X(InputAction.CallbackContext context);
            void OnMouseControl_Y(InputAction.CallbackContext context);
        }
    }
}
